#BlueJ class context
comment0.target=BinaryNode
comment0.text=\r\n\ Node\ value\ to\ be\ used\ in\ BinaryTree,\ conatins\ a\ value\ and\ two\ potential\ children\r\n\ tested\ implicitly\ through\ tree\ functions\ as\ all\ tree\ methods\ rely\ on\ the\ working\ state\ of\ node\ methods\r\n\r\n\ @author\ Sean\ McLoughlin\r\n\ @version\ 11/12/24\r\n
comment1.params=value\ left\ right
comment1.target=BinaryNode(java.lang.Comparable,\ BinaryNode,\ BinaryNode)
comment1.text=\r\n\ constructor\ for\ node\ with\ child/children,\ if\ only\ one\ child\ node\ is\ to\ be\ defined,\ param\ can\ accept\ null\ value\ in\ place\ of\ empty\ child\ slot\r\n\ @param\ value\ E\ type\ value\ representing\ value\ to\ be\ stored\ by\ current\ node\r\n\ @param\ left\ BinaryNode\ type\ object\ to\ be\ assigned\ as\ left\ child\r\n\ @param\ right\ BianryNode\ type\ object\ to\ be\ assigned\ as\ right\ child\r\n
comment2.params=value
comment2.target=BinaryNode(java.lang.Comparable)
comment2.text=\r\n\ constructor\ for\ childless\ BinaryNode\r\n\ @param\ value\ E\ type\ objetc\ representing\ value\ to\ be\ stored\ in\ built\ node\r\n
comment3.params=
comment3.target=BinaryNode\ getLeft()
comment3.text=\r\n\ returns\ node\ stored\ in\ left-node\ slot\r\n\ @return\ BinaryNode\ value\ representing\ left\ child\ of\ current\ node\r\n
comment4.params=
comment4.target=BinaryNode\ getRight()
comment4.text=\r\n\ returns\ Node\ stored\ in\ right-node\ slot\r\n\ @reutrn\ BinaryNode\ value\ representing\ right\ child\ of\ curent\ node\r\n
comment5.params=n
comment5.target=void\ setLeft(BinaryNode)
comment5.text=\r\n\ setter\ method\ for\ left\ child\ node\r\n\ @param\ n\ BinaryNode\ type\ object\ to\ be\ set\ to\ left\ child\ node\r\n
comment6.params=n
comment6.target=void\ setRight(BinaryNode)
comment6.text=\r\n\ setter\ method\ for\ right\ child\ node\r\n\ @param\ n\ BinaryNode\ type\ object\ to\ be\ set\ to\ right\ child\ node\r\n
comment7.params=
comment7.target=java.lang.Comparable\ getValue()
comment7.text=\r\n\ returns\ value\ held\ by\ current\ node\r\n\ @reurn\ E\ type\ value\ contained\ by\ current\ node\r\n
comment8.params=val
comment8.target=boolean\ find(java.lang.Comparable)
comment8.text=\r\n\ recursive\ helper\ method\ to\ search\ through\ list\ to\ find\ a\ given\ value\r\n\ @param\ val\ E\ type\ object\ representing\ object\ to\ be\ searched\ for\r\n
numComments=9
