#BlueJ class context
comment0.target=Node
comment0.text=\r\n\ Holds\ a\ subset\ of\ a\ full\ list\ described\ by\ DoublingList\ class\r\n\ \ node\ does\ not\ contain\ a\ test\ class\ as\ all\ methods\ are\ implicitly\ tested\ by\ other\ test\ classes\ depending\ on\ their\ functionality\r\n\r\n\ @author\ Sean\ McLoughlin\r\n\ @version\ 10/28/24\r\n
comment1.params=type\ link
comment1.target=Node(boolean,\ Node)
comment1.text=\r\n\ node\ constructor\ for\ dummy\ nodes,\ contains\ no\ value,\ only\ contains\ link\ to\ preceding\ or\ following\ node\r\n\ @param\ type\ boolean\ representing\ whether\ the\ node\ is\ the\ header\ or\ footer\ to\ the\ list\ (true\=footer)\r\n\ \r\n
comment10.params=
comment10.target=int\ findCap()
comment10.text=\r\n\ recursive\ helper\ method\ to\ help\ find\ total\ capacity\ of\ total\ list\r\n\ @return\ int\ value\ representing\ total\ capcity\ of\ current\ and\ all\ following\ nodes\r\n
comment11.params=i
comment11.target=void\ incrSize(int)
comment11.text=\r\n\ increments\ size\ value\ stored\ inside\ of\ node\r\n\ @param\ i\ int\ value\ representing\ how\ much\ to\ increment\ size\ value\r\n
comment12.params=
comment12.target=Node\ next()
comment12.text=\r\n\ returns\ value\ stored\ in\ next\ pointer\r\n\ @return\ Node\ type\ object\ representing\ value\ currently\ stored\ in\ next\ pointer\r\n
comment13.params=
comment13.target=int\ sizeCurr()
comment13.text=\r\n\ returns\ current\ size\ of\ node\ (number\ of\ stored\ values)\r\n\ @return\ number\ of\ values\ stored\ in\ current\ node\r\n
comment14.params=
comment14.target=int\ sizeFull()
comment14.text=\r\n\ recursive\ helper\ method\ to\ assist\ in\ determining\ number\ of\ values\ stored\ in\ entire\ list\r\n\ @return\ int\ value\ representing\ number\ of\ values\ stored\ in\ this\ and\ all\ followign\ nodes\r\n
comment15.params=val
comment15.target=java.lang.Object\ getCurr(int)
comment15.text=\r\n\ returns\ value\ stored\ at\ specified\ index\ in\ current\ node\r\n\ @param\ val\ index\ to\ search\ for\ value\r\n\ @return\ E\ type\ value\ representing\ value\ stored\ at\ passed\ index\r\n
comment16.params=size
comment16.target=void\ setSize(int)
comment16.text=\r\n\ takes\ in\ desired\ size\ value\ and\ sets\ size\ field\r\n\ @param\ size\ int\ value\ representing\ desired\ size\ value\r\n
comment17.params=e
comment17.target=void\ setNext(Node)
comment17.text=\r\n\ sets\ next\ pointer\ to\ passed\ value\r\n\ @param\ e\ Node\ type\ value\ to\ be\ set\ to\ next\ pointer\r\n
comment18.params=ind\ e
comment18.target=void\ setVal(int,\ java.lang.Object)
comment18.text=\r\n\ sets\ passed\ value\ to\ passed\ index\ in\ current\ node\r\n\ @param\ ind\ int\ value\ representing\ index\ to\ store\ passed\ value\r\n\ @param\ e\ E\ type\ object\ to\ be\ stored\ in\ passed\ index\ value\r\n
comment2.params=capacity
comment2.target=Node(int)
comment2.text=\r\n\ builds\ a\ new,\ empty\ node\ with\ a\ given\ capacity\r\n\ @param\ capacity\ int\ value\ representing\ desired\ capacity\ of\ the\ Node\ object\r\n
comment3.params=capacity\ value
comment3.target=Node(int,\ java.lang.Object)
comment3.text=\r\n\ biulds\ a\ new\ node\ object\ with\ a\ specified\ capacity\ and\ single\ starting\ value\r\n\ @param\ capacity\ int\ value\ representing\ desired\ node\ capacity\r\n\ @param\ value\ E\ type\ object\ representing\ value\ to\ be\ initially\ stored\ in\ built\ node\r\n
comment4.params=capacity\ values
comment4.target=Node(int,\ java.lang.Object[])
comment4.text=\r\n\ builds\ a\ new\ node\ object\ with\ specified\ capcaity\ and\ list\ of\ values,\ if\ specified\ capacity\ is\ not\ enough\ to\ hold\ values,\ will\ build\ and\ assign\ a\ next\ node\ to\ hold\ the\ rest\ of\ the\ values\r\n\ @param\ capacity\ int\ value\ representing\ desired\ capcity\ of\ initial\ list\r\n\ @param\ values\ E\ array\ representing\ list\ of\ values\ to\ be\ stored\ in\ list\r\n
comment5.params=node
comment5.target=void\ setPrevious(Node)
comment5.text=\r\n\ sets\ previous\ pointer\ to\ passed\ Node\ object\r\n\ @param\ node\ Node\ type\ object\ to\ be\ set\ to\ previous\ pointer\r\n
comment6.params=
comment6.target=Node\ previous()
comment6.text=\r\n\ returns\ value\ stored\ in\ previous\ pointer\r\n\ @return\ value\ stored\ in\ previous\ pointer\r\n
comment7.params=
comment7.target=int\ size()
comment7.text=\r\n\ returns\ size\ of\ list\ by\ recursively\ moving\ through\ all\ nodes\ and\ adding\ sizes\r\n\ meant\ to\ be\ used\ as\ a\ recursive\ helper\ method\ for\ a\ call\ made\ in\ DoublingList\ class\r\n\ @return\ total\ number\ of\ elements\ in\ the\ array\r\n
comment8.params=
comment8.target=int\ nodeCap()
comment8.text=\r\n\ returns\ the\ individual\ capacity\ of\ this\ individual\ Node\r\n\ @return\ total\ capcity\ of\ called\ node\r\n
comment9.params=
comment9.target=boolean\ hasSpace()
comment9.text=\r\n\ returns\ true\ if\ there\ exists\ an\ open\ slot\ somewhere\ in\ the\ list\r\n\ meant\ to\ be\ a\ recursive\ helper\ method\ called\ by\ DoublingList\ class\r\n\ @return\ true\ if\ there\ exists\ space\ for\ an\ incoming\ value\ in\ the\ entire\ DoublingList\r\n
numComments=19
