#BlueJ class context
comment0.target=DoublingList
comment1.params=value
comment1.target=DoublingList(java.lang.Object)
comment1.text=\r\n\ builds\ new\ DoublingList\ containing\ one\ value\ (and\ one\ node)\r\n\ @param\ value\ E\ type\ object\ containing\ value\ ot\ place\ in\ list\r\n
comment10.params=
comment10.target=int\ findCap()
comment10.text=\r\n\ recursively\ finds\ the\ full\ capcity\ of\ the\ list\r\n\ @return\ int\ value\ representing\ the\ full\ capacity\ of\ the\ list\r\n
comment11.params=
comment11.target=int\ findSize()
comment11.text=\r\n\ recursively\ finds\ the\ full\ size\ of\ the\ list\r\n\ @return\ int\ value\ representing\ total\ number\ of\ values\ held\ by\ list\r\n
comment12.params=
comment12.target=int\ nodeCount()
comment12.text=\r\n\ returns\ the\ number\ of\ nodes\ held\ by\ the\ list\r\n\ @return\ int\ value\ representing\ the\ number\ of\ nodes\ contained\ in\ list\r\n
comment13.params=index
comment13.target=java.lang.Object\ get(int)
comment13.text=\r\n\ returns\ item\ at\ point\ in\ list\ (omits\ nonreal\ (null)\ indices)\r\n\ @param\ index\ lsit\ index\ to\ find\ element\ at\r\n\ @return\ element\ stored\ at\ passed\ list\ index\r\n
comment14.params=
comment14.target=Node\ lastNode()
comment14.text=\r\n\ returns\ last\ node\ in\ list\ via\ footer's\ previous\ pointer\r\n\ @return\ last\ node\ contained\ by\ current\ list\r\n
comment15.params=
comment15.target=Node\ firstNode()
comment15.text=\r\n\ returns\ first\ node\ in\ list\ via\ header's\ next\ pointer\r\n\ @return\ first\ node\ contained\ by\ current\ list\r\n
comment16.params=
comment16.target=java.lang.String\ toString()
comment16.text=\r\n\ parses\ list\ to\ readable\ String\ value\r\n
comment2.params=values
comment2.target=DoublingList(java.lang.Object[])
comment2.text=\r\n\ builds\ new\ DoublingList\ with\ values\ passed\ in\ array\r\n\ @param\ values\ array\ containing\ E\ type\ values\ which\ should\ be\ inserted\ into\ list\r\n
comment3.params=index
comment3.target=java.util.ListIterator\ listIterator(int)
comment3.text=\r\n\ returns\ new\ listIterator\ referencing\ calling\ list\ and\ sets\ pointer\ value\ to\ passed\ index\ value\r\n\ @param\ index\ int\ value\ representing\ desired\ pointer\ value\r\n\ @return\ ListIterator\ object\ to\ be\ used\ for\ list\ traversal\r\n
comment4.params=
comment4.target=void\ headerFooter()
comment4.text=\r\n\ sets\ header\ and\ footer\ values\ to\ wrap\ around\ initial\ node\r\n
comment5.params=
comment5.target=int\ size()
comment5.text=\r\n\ returns\ size\ of\ list\ by\ recursively\ moving\ through\ all\ nodes\ and\ adding\ sizes\r\n\ @return\ total\ number\ of\ elements\ in\ the\ array\r\n
comment6.params=ind\ e
comment6.target=void\ add(int,\ java.lang.Object)
comment6.text=\r\n\ adds\ a\ value\ at\ a\ specified\ index\ relative\ to\ the\ list\ (null\ values\ do\ NOT\ count\ as\ indices\ in\ the\ list)\r\n\ once\ added,\ values\ in\ the\ list\ will\ be\ 'bumped'\ up/down\ the\ list\ until\ a\ null\ spot\ is\ found\ to\ absorb\ the\ new\ addition\r\n\ a\ full\ list\ will\ warrant\ the\ addition\ of\ a\ new\ ndoe\ to\ the\ end\ of\ the\ list\ to\ provide\ an\ absorbing\ null\ element\r\n\ code\ for\ this\ method\ is\ intentionally\ compact\ since\ there\ is\ very\ little\ full\ overlap\ across\ parts,\ so\ the\ code\ is\ easier\ to\ read\ as\ a\ unit\ rather\ than\ split\ up\r\n\ @param\ ind\ int\ value\ representing\ the\ index\ at\ which\ the\ value\ should\ be\ added\r\n\ @param\ e\ E\ type\ value\ representing\ value\ ot\ be\ added\ to\ the\ list\r\n
comment7.params=ind
comment7.target=java.lang.Object\ remove(int)
comment7.text=\r\n\ removes\ element\ at\ passed\ index\ and\ returns\ value\ that\ was\ previously\ stored\r\n\ if\ the\ list\ is\ foudn\ to\ have\ reached\ the\ minimum\ number\ fo\ elements\ allowed\ to\ be\ stored,\ elements\ are\ pushed\ to\ the\ front\ of\ the\ list\r\n\ code\ for\ this\ method\ is\ intentionally\ compact\ since\ there\ is\ very\ little\ full\ overlap\ across\ parts,\ so\ the\ code\ is\ easier\ to\ read\ as\ a\ unit\ rather\ than\ split\ up\r\n\ @param\ ind\ int\ value\ representing\ the\ lsit\ index\ of\ the\ item\ to\ be\ removed\r\n\ @return\ E\ type\ object\ representing\ object\ previously\ stored\ at\ specified\ index\r\n
comment8.params=
comment8.target=void\ correctSize()
comment9.params=
comment9.target=boolean\ hasSpace()
comment9.text=\r\n\ recursively\ finds\ whether\ there\ exists\ space\ to\ add\ an\ element\ somewhere\ in\ the\ list\r\n\ @return\ boolean\ representing\ whether\ there\ exists\ a\ null\ element\ to\ be\ filled\ by\ the\ list\r\n
numComments=17
