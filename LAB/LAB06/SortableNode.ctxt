#BlueJ class context
comment0.target=SortableNode
comment1.params=d
comment1.target=SortableNode(java.lang.Comparable)
comment1.text=\r\n\ builds\ new\ SortableNode\ object\ containing\ passed\ E\ value\r\n
comment10.params=
comment10.target=void\ uniqueSort()
comment10.text=\r\n\ sorts\ list\ and\ eliminates\ all\ identical\ values\r\n
comment11.params=
comment11.target=void\ uSortHelper()
comment11.text=\r\n\ recursively\ finds\ and\ removes\ identical\ values\ in\ linkedlist\r\n
comment2.params=n
comment2.target=SortableNode(Node)
comment2.text=\r\n\ builds\ new\ list\ of\ SortableNodes\ based\ off\ of\ a\ passed\ list\ of\ Node\ ojbects\r\n
comment3.params=arr
comment3.target=SortableNode(java.util.ArrayList)
comment3.text=\r\n\ builds\ new\ SortaeblNore\ object\ using\ values\ contained\ in\ passed\ arraylist\ object\r\n
comment4.params=
comment4.target=void\ initNext()
comment5.params=value
comment5.target=void\ partition(java.lang.Comparable)
comment5.text=\r\n\ partitions\ list\ based\ on\ passed\ partition\ value\r\n\ @param\ value\ E\ type\ object\ representing\ partition\ value\r\n
comment6.params=part\ s1\ s2
comment6.target=void\ partitionHelper(java.lang.Comparable,\ SortableNode,\ SortableNode)
comment6.text=\r\n\ recursively\ creates\ two\ linked\ lists\ of\ SortableNodes\ partitioning\ based\ on\ passed\ part\ value\r\n\ @param\ part\ E\ type\ object\ defining\ value\ to\ split\ list\ based\ on\r\n\ @param\ s1\ SortableNode\ heading\ the\ list\ containing\ values\ smaller\ than\ partition\ value\r\n\ @param\ s2\ SortableNode\ heading\ the\ list\ containing\ values\ larger\ than\ partition\ value\r\n
comment7.params=
comment7.target=void\ sort()
comment7.text=\r\n\ sorts\ linked\ list\ by\ swapping\ values\ to\ achieve\ increasing\ order\r\n
comment8.params=curr
comment8.target=SortableNode\ sortHelper(SortableNode)
comment8.text=\r\n\ recursively\ finds\ smallest\ value\ in\ list\ and\ returns\ SortableNode\ ojbect\ containing\ that\ value\r\n\ @param\ curr\ SortableNode\ object\ to\ begin\ list\ search\ --\ passes\ the\ smallest\ found\ value\ in\ recursion\r\n\ @return\ SortableNode\ object\ containing\ the\ smallest\ value\ in\ the\ list\r\n
comment9.params=hold
comment9.target=java.lang.Comparable\ setVal(java.lang.Comparable)
comment9.text=\r\n\ replaces\ val\ value\ with\ passed\ E\ type\ object,\ then\ returns\ old\ value\r\n\ @param\ hold\ E\ type\ value\ indicating\ value\ to\ replace\ current\ value\ with\r\n\ @return\ value\ held\ by\ val\ before\ being\ replaced\r\n
numComments=12
